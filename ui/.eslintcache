[{"/home/vndrkl/nodeProjects/petra/src/App.tsx":"1","/home/vndrkl/nodeProjects/petra/src/components/TaskPreviewForm.tsx":"2","/home/vndrkl/nodeProjects/petra/src/hooks/useCalendar.ts":"3","/home/vndrkl/nodeProjects/petra/src/views/Home.tsx":"4","/home/vndrkl/nodeProjects/petra/src/utils/index.ts":"5","/home/vndrkl/nodeProjects/petra/src/components/YearView.tsx":"6"},{"size":270,"mtime":1610589220463,"results":"7","hashOfConfig":"8"},{"size":3376,"mtime":1610827486820,"results":"9","hashOfConfig":"8"},{"size":1941,"mtime":1610848210465,"results":"10","hashOfConfig":"8"},{"size":6036,"mtime":1610847872929,"results":"11","hashOfConfig":"8"},{"size":818,"mtime":1610848150914,"results":"12","hashOfConfig":"8"},{"size":4000,"mtime":1610848548839,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wyyoac",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/vndrkl/nodeProjects/petra/src/App.tsx",[],"/home/vndrkl/nodeProjects/petra/src/components/TaskPreviewForm.tsx",[],"/home/vndrkl/nodeProjects/petra/src/hooks/useCalendar.ts",["27"],"import moment from \"moment\";\nimport { ITask } from \"../types\";\nimport { generateMonthDays } from \"../utils\";\n\nexport default function (date: moment.Moment, tasks: ITask[]) {\n  const firstDayOfMonth = (): number => {\n    const day = moment(date).startOf(\"month\").format(\"d\");\n    return parseInt(day);\n  };\n\n  const daysInMonth = () => {\n    const daysCount = moment(date).daysInMonth();\n    return Array.from(Array(daysCount), (_, i) => i + 1);\n  };\n\n  const dayStart = firstDayOfMonth();\n  const days = [...Array<number>(dayStart).fill(0), ...daysInMonth()];\n  const dayDate = (day: number) => {\n    return moment(date).set(\"date\", day).format(\"YYYY-MM-DD\");\n  };\n\n  const getDaysWithTasks = (days: number[]) =>\n    days.map((day) => {\n      const dateStr = dayDate(day);\n      const cellTasks = tasks.filter((task) => task.dueDate === dateStr);\n      return {\n        day: day,\n        passed: day === 0,\n        tasks: cellTasks,\n        dateStr,\n      };\n    });\n\n  const monthString = (index: number) => {\n    const months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"November\",\n      \"Decemeber\",\n    ];\n    return months[index];\n  };\n\n  const generateDates = () => {\n    let oldDate = date;\n    return Array.from(Array(11).keys()).map((index) => {\n      //set the date to reflect next month and then\n      // generate all days for the month\n      const newDate = moment(oldDate).set(\"month\", index);\n      const { days, dayDate, currentDay, currentMonth } = generateMonthDays(\n        newDate\n      );\n      oldDate = newDate;\n\n      return {\n        month: monthString(index),\n        days,\n        dayDate,\n        currentDay,\n        currentMonth,\n      };\n    });\n  };\n\n  const daysWithTasks = getDaysWithTasks(days);\n  const todayDate = parseInt(date.format(\"D\"));\n\n  return { daysWithTasks, todayDate, generateDates };\n}\n","/home/vndrkl/nodeProjects/petra/src/views/Home.tsx",[],"/home/vndrkl/nodeProjects/petra/src/utils/index.ts",[],"/home/vndrkl/nodeProjects/petra/src/components/YearView.tsx",[],{"ruleId":"28","severity":1,"message":"29","line":5,"column":1,"nodeType":"30","endLine":76,"endColumn":2},"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration"]